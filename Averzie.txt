A3 - celkova predajna cena vsetkych automobilov a priemerna predajna cena vsetkych automobilov

#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

/********************* definicie tried programu ***************************/
//DEKLARACIA TRIEDY FIRMAAUTOBAZAR
class FirmaAutobazar
{
  private:
    //PRIVATNE CLENSKE PREMENNE
    char nazov_firmy[30], pravna_forma[10], sidlo_firmy[30];
    long ICO;
    long long DIC;
    public:	
    //bezparametricky konstruktor- pouzije sa na vytvorenie objektov	
	FirmaAutobazar() {}
    //bezparametricky destruktor 
    ~FirmaAutobazar() {}
	//explicitny parametricky konstruktor
    FirmaAutobazar(char *, char *, char *, long, long long);
    //CLENSKE FUNKCIE
    char *VratNazovFirmy(); 
    char *VratPravnaForma();
    char *VratSidloFirmy();
    long VratICO(); 
    long long VratDIC();  
    void ZmenNazovFirmy(char *);
    void ZmenPravnaForma(char *);
    void ZmenSidloFirmy(char *);
    void ZmenICO(long);
    void ZmenDIC(long long);
};

//DEKLARACIA TRIEDY AUTOMOBIL
class Automobil:public FirmaAutobazar	
{
   private:
    //PRIVATNE CLENSKE PREMENNE
     char znacka_typ_auta[30];
     int rok_vyroby_auta, predaj_cis_auta; 
     long int cena_auta;
   public:
    //bezparametricky konstruktor- pouzije sa na vytvorenie objektov	
    Automobil() {}
    //bezparametricky destruktor
	~Automobil() {}
	 //explicitny parametricky konstruktor
     Automobil(char *, char *, char *, long, long long, char *, int, int, long int);
	 //CLENSKE FUNKCIE
     char *VratZnackaTypAuta();		
     int VratRok_vyroby_auta();
     int Vratpredaj_cis_auta(); 
     long int VratCena_auta(); 
     void ZmenZnackaTypAuta(char *r);
     void ZmenRok_vyroby_auta(int);
     void Zmenpredaj_cis_auta(int);
     void ZmenCena_auta(long int);

    //OPERATOROVA FUNKCIA PREPISANEHO OPERATORA BITOVEHO POSUVU
	friend ostream& operator<<(ostream &vyst_prud, Automobil a);
};

/*********** definicie clenskych funkcii tried ************/
//definicia parametrickeho konstruktora triedy 'FirmaAutobazar'
FirmaAutobazar::FirmaAutobazar(char *nf, char *pf, char *sf, long i, long long d)
{
	strcpy(nazov_firmy, nf);
	strcpy(pravna_forma, pf);
    strcpy(sidlo_firmy, sf);
    ICO = i;
    DIC = d;
}

char* FirmaAutobazar::VratNazovFirmy()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, nazov_firmy);
	return pom;
}

char* FirmaAutobazar::VratPravnaForma()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, pravna_forma);
	return pom;
}

char* FirmaAutobazar::VratSidloFirmy()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, sidlo_firmy);
	return pom;
}

long int FirmaAutobazar::VratICO()
{
	return ICO;
}

long long FirmaAutobazar::VratDIC()
{
	return DIC;
}

void FirmaAutobazar::ZmenNazovFirmy(char* nf)
{
	strcpy(nazov_firmy, nf);
}

void FirmaAutobazar::ZmenPravnaForma(char* pf)
{
	strcpy(pravna_forma, pf);
}

void FirmaAutobazar::ZmenSidloFirmy(char* sf)
{
	strcpy(sidlo_firmy, sf);
}

void FirmaAutobazar::ZmenICO(long int i)
{
	ICO = i;
}

void FirmaAutobazar::ZmenDIC(long long d)
{
	DIC = d;
}

//definicia parametrickeho konstruktora triedy 'Automobil'
Automobil::Automobil(char *nf, char *pf, char *sf, long i, long long d, char* zta, int rva, int pca, long int ca) : FirmaAutobazar(nf, pf, sf, i, d)
{
	strcpy(znacka_typ_auta, zta);
	rok_vyroby_auta = rva;
    predaj_cis_auta = pca;
    cena_auta = ca;
}

char* Automobil::VratZnackaTypAuta()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, znacka_typ_auta);
	return pom;
}

int Automobil::VratRok_vyroby_auta()
{
	return rok_vyroby_auta;
}

int Automobil::Vratpredaj_cis_auta()
{
	return predaj_cis_auta;
}

long int Automobil::VratCena_auta()
{
	return cena_auta;
}

void Automobil::ZmenZnackaTypAuta(char* zta)
{
	strcpy(znacka_typ_auta, zta);
}

void Automobil::ZmenRok_vyroby_auta(int rva)
{
	rok_vyroby_auta = rva;
}

void Automobil::Zmenpredaj_cis_auta(int pca)
{
	predaj_cis_auta = pca;
}

void Automobil::ZmenCena_auta(long int ca)
{
	cena_auta = ca;
}

//defin. neclensk. spriatelenej operatorovej funkcie prepisaneho operatora << pre obj. tr. 'Automobil'
ostream& operator<<(ostream& vyst_prud, Automobil a)
{
	vyst_prud 
        << "nazov firmy prevadzk. autobazar s predavanym autom     : " << a.VratNazovFirmy() << endl
		<< "pravna forma fy. prevadyk . autobazar s pred. autom    : " << a.VratPravnaForma() << endl
		<< "sidlo firmy prevadz. autobazar s predavanym autom      : " << a.VratSidloFirmy() << endl		
		<< "ICO firmy prevadzk. autobazar s predavanym autom	   : " << a.VratICO() << endl		
		<< "znacka a typ auta                                      : " << a.VratZnackaTypAuta() << endl
		<< "rok vyroby auta	                                       : " << a.VratRok_vyroby_auta() << endl
        << "predajne cislo auta	                                   : " << a.Vratpredaj_cis_auta() << endl
		<< "predajna cena auta [Eur]     	                       : " << a.VratCena_auta() << endl;
	return vyst_prud;
}

int main() 
{
    char nazov_firmy [100], pravna_forma [100], sidlo_firmy [100], znacka_typ_auta [100];
	int rok_vyroby_auta, predaj_cis_auta, pocet, i;
    long ico;
    long long dic, celkova_cena = 0;
    long int cena_auta;
    float priemerna_cena = 0;

    cout << "kolko automobilov chcete vkladat do programu? ";
    cin >> pocet;
	cout << "-----------------------------------------------" << endl;
	//vytvorenie dynamickeho pola s poctom 'pocet' objektov typu 'Automobil', 
	//k jeho inicializacii sa pouzije bezparametricky konstruktor triedy 'Automobil', ktory musi existovat
    Automobil *p_automobil = new Automobil[pocet];	
    
    i = 0;
	while (i < pocet)
	{
		int local_i = i;
		if (pocet == 1)
		{
			cout << "vlozte nazov firmy prevadyk. autobazar: ";
			cin >> nazov_firmy;
			cout << "vlozte pravnu formu fy. prevadzk. autobazar: ";
			cin >> pravna_forma;
			cout << "vlozte sidlo firmy prevadzk. autobazar: ";
			cin >> sidlo_firmy;
			cout << "vlozte ICO firmy prevadzk. autobazar: ";
			cin >> ico;
			cout << "vlozte DIC firmy prevadzk. autobazar: ";
			cin >> dic;
			cout << "vlozte znacku a typ auta: ";
			cin >> znacka_typ_auta;
			cout << "vlozte rok vyroby auta: ";
			cin >> rok_vyroby_auta;
			cout << "vlozte predajne cislo auta: ";
			cin >> predaj_cis_auta;
            cout << "vlozte predajnu cenu auta: ";
			cin >> cena_auta;
		}
		else
		{
			local_i++;
			cout << "vlozte nazov firmy prevadzk. autobazar s " << local_i << ". predavanym autom   :";
			cin >> nazov_firmy;
			cout << "vlozte pravnu formu fy. prevadzk. autobazar s " << local_i << ". pred. autom   :";
			cin >> pravna_forma;
			cout << "vlozte sidlo firmy prevadzk. autobazar s " << local_i << ". predavanym autom   :";
			cin >> sidlo_firmy;
			cout << "vlozte ICO firmy prevadzk. autobazar s " << local_i << ". predavanym autom     :";
			cin >> ico;
			cout << "vlozte DIC firmy prevadzk. autobazar s " << local_i << ". predavanym autom     :";
			cin >> dic;
			cout << "vlozte znacku a typ " << local_i << ". auta                                    :";
			cin >> znacka_typ_auta;
			cout << "vlozte rok vyroby " << local_i << ". auta                                      :";
			cin >> rok_vyroby_auta;
			cout << "vlozte predajne cislo " << local_i << ". auta                                  :";
			cin >> predaj_cis_auta;
            cout << "vlozte predajnu cenu " << local_i << ". auta                                   :";
			cin >> cena_auta;
            cout << "-----------------------------------------------" << endl;
		}

		(p_automobil + i)->ZmenNazovFirmy(nazov_firmy);
		(p_automobil + i)->ZmenPravnaForma(pravna_forma);
		(p_automobil + i)->ZmenSidloFirmy(sidlo_firmy);
		(p_automobil + i)->ZmenICO(ico);
		(p_automobil + i)->ZmenDIC(dic);
		(p_automobil + i)->ZmenZnackaTypAuta(znacka_typ_auta);
		(p_automobil + i)->ZmenRok_vyroby_auta(rok_vyroby_auta);
		(p_automobil + i)->Zmenpredaj_cis_auta(predaj_cis_auta);
        (p_automobil + i)->ZmenCena_auta(cena_auta);
        i++;
	}

   //vytvorenie objektu 'car' triedy 'Automobil' pomocou volania parametrickeho konstruktora
    cout << endl << "programom vytvoreny a inicializovany objekt pomocou parametrickeho konstruktora triedy 'Automobil': " << endl;
    cout << "-----------------------------------------------" << endl;
    char n[] = "Happy_Autobazar";
    char p[] = "s.r.o";
    char s[] = "Trnava";
    char z[] = "Ford_Monteo";
   
    Automobil car(n, p, s, 19865789, 2586578521, z, 2010, 5897421, 5230);
    cout << car;

    cout << endl << "hodnoty instan. premennych objektov triedy 'Automobil'(aut), vlozene pouzivatelom programu: " << endl;
		//dereferencia ukazovatela '(p_osoba+i)'
		for (int i = 0; i < pocet; i++) {
		    cout << "----------------------------------------------" << endl;
		    cout << *(p_automobil+i);
	}

    cout << "----------------------------------------------" << endl;
   
    //celkova predajna cena vsetkych automobilov a priemerna predajna cena vsetkych automobilov
	celkova_cena = car.VratCena_auta();
	for (int i = 0; i < pocet; i++)
		celkova_cena += (p_automobil+i)->VratCena_auta();

	priemerna_cena = ((float)celkova_cena) / (pocet + 1);
	cout << "celkova predajna cena uvedenych " << pocet + 1 << "-och aut [Eur]: " << celkova_cena << endl;
	cout << "priemerna predajna cena uvedenych " << pocet + 1 << "-och aut [Eur]: " << priemerna_cena << endl;

    //zmazanie 1-rozmerneho dynamickeho pola, na ktore ukazuje ukazovatel 'p_automobil', z pamate
	delete[] p_automobil;
    
return 0;
}

A3- viac kriterii

#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

/********************* definicie tried programu ***************************/
//DEKLARACIA TRIEDY FIRMAAUTOBAZAR
class FirmaAutobazar
{
  private:
    //PRIVATNE CLENSKE PREMENNE
    char nazov_firmy[30], pravna_forma[10], sidlo_firmy[30];
    long ICO;
    long long DIC;
    public:	
    //bezparametricky konstruktor- pouzije sa na vytvorenie objektov	
	FirmaAutobazar() {}
    //bezparametricky destruktor 
    ~FirmaAutobazar() {}
	//explicitny parametricky konstruktor
    FirmaAutobazar(char *, char *, char *, long, long long);
    //CLENSKE FUNKCIE
    char *VratNazovFirmy(); 
    char *VratPravnaForma();
    char *VratSidloFirmy();
    long VratICO(); 
    long long VratDIC();  
    void ZmenNazovFirmy(char *);
    void ZmenPravnaForma(char *);
    void ZmenSidloFirmy(char *);
    void ZmenICO(long);
    void ZmenDIC(long long);
};

//DEKLARACIA TRIEDY AUTOMOBIL
class Automobil:public FirmaAutobazar	
{
   private:
    //PRIVATNE CLENSKE PREMENNE
     char znacka_typ_auta[30];
     int rok_vyroby_auta, predaj_cis_auta; 
     long int cena_auta;
   public:
    //bezparametricky konstruktor- pouzije sa na vytvorenie objektov	
    Automobil() {}
    //bezparametricky destruktor
	~Automobil() {}
	 //explicitny parametricky konstruktor
     Automobil(char *, char *, char *, long, long long, char*, int, int, long int);
	 //CLENSKE FUNKCIE
     char *VratZnackaTypAuta();		
     int VratRok_vyroby_auta();
     int Vratpredaj_cis_auta(); 
     long int VratCena_auta(); 
     void ZmenZnackaTypAuta(char *r);
     void ZmenRok_vyroby_auta(int);
     void Zmenpredaj_cis_auta(int);
     void ZmenCena_auta(long int);

    //OPERATOROVA FUNKCIA PREPISANEHO OPERATORA BITOVEHO POSUVU
	friend ostream& operator<<(ostream &vyst_prud, Automobil a);
};

/*********** definicie clenskych funkcii tried ************/
//definicia parametrickeho konstruktora triedy 'FirmaAutobazar'
FirmaAutobazar::FirmaAutobazar(char *nf, char *pf, char *sf, long i, long long d)
{
	strcpy(nazov_firmy, nf);
	strcpy(pravna_forma, pf);
    strcpy(sidlo_firmy, sf);
    ICO = i;
    DIC = d;
}

char* FirmaAutobazar::VratNazovFirmy()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, nazov_firmy);
	return pom;
}

char* FirmaAutobazar::VratPravnaForma()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, pravna_forma);
	return pom;
}

char* FirmaAutobazar::VratSidloFirmy()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, sidlo_firmy);
	return pom;
}

long int FirmaAutobazar::VratICO()
{
	return ICO;
}

long long FirmaAutobazar::VratDIC()
{
	return DIC;
}

void FirmaAutobazar::ZmenNazovFirmy(char* nf)
{
	strcpy(nazov_firmy, nf);
}

void FirmaAutobazar::ZmenPravnaForma(char* pf)
{
	strcpy(pravna_forma, pf);
}

void FirmaAutobazar::ZmenSidloFirmy(char* sf)
{
	strcpy(sidlo_firmy, sf);
}

void FirmaAutobazar::ZmenICO(long int i)
{
	ICO = i;
}

void FirmaAutobazar::ZmenDIC(long long d)
{
	DIC = d;
}

//definicia parametrickeho konstruktora triedy 'Automobil'
Automobil::Automobil(char *nf, char *pf, char *sf, long i, long long d, char* zta, int rva, int pca, long int ca) : FirmaAutobazar(nf, pf, sf, i, d)
{
	strcpy(znacka_typ_auta, zta);
	rok_vyroby_auta = rva;
    predaj_cis_auta = pca;
    cena_auta = ca;
}

char* Automobil::VratZnackaTypAuta()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, znacka_typ_auta);
	return pom;
}

int Automobil::VratRok_vyroby_auta()
{
	return rok_vyroby_auta;
}

int Automobil::Vratpredaj_cis_auta()
{
	return predaj_cis_auta;
}

long int Automobil::VratCena_auta()
{
	return cena_auta;
}

void Automobil::ZmenZnackaTypAuta(char* zta)
{
	strcpy(znacka_typ_auta, zta);
}

void Automobil::ZmenRok_vyroby_auta(int rva)
{
	rok_vyroby_auta = rva;
}

void Automobil::Zmenpredaj_cis_auta(int pca)
{
	predaj_cis_auta = pca;
}

void Automobil::ZmenCena_auta(long int ca)
{
	cena_auta = ca;
}

//defin. neclensk. spriatelenej operatorovej funkcie prepisaneho operatora << pre obj. tr. 'Automobil'
ostream& operator<<(ostream& vyst_prud, Automobil a)
{
	vyst_prud 
        << "nazov firmy prevadzk. autobazar s predavanym autom     : " << a.VratNazovFirmy() << endl
	    << "pravna forma fy. prevadyk . autobazar s pred. autom    : " << a.VratPravnaForma() << endl
		<< "sidlo firmy prevadz. autobazar s predavanym autom      : " << a.VratSidloFirmy() << endl		
		<< "ICO firmy prevadzk. autobazar s predavanym autom	   : " << a.VratICO() << endl		
		<< "znacka a typ auta                                      : " << a.VratZnackaTypAuta() << endl
		<< "rok vyroby auta	                                       : " << a.VratRok_vyroby_auta() << endl
        << "predajne cislo auta	                                   : " << a.Vratpredaj_cis_auta() << endl
		<< "predajna cena auta [Eur]     	                       : " << a.VratCena_auta() << endl;
	return vyst_prud;
}

int main() 
{
    char nazov_firmy [100], pravna_forma [100], sidlo_firmy [100], znacka_typ_auta [100];
	int rok_vyroby_auta, predaj_cis_auta, pocet, i, pocet_12rocnych = 0, pocet_4rocnych=0;
    long ico;
    long long dic, celkova_cena3 = 0, celkova_cena2 = 0, celkova_cena = 0;
    long int cena_auta;
    double priemerna_cena2 = 0, priemerna_cena3 = 0, priemerna_cena = 0;

    cout << "kolko automobilov chcete vkladat do programu? ";
    cin >> pocet;
	cout << "-----------------------------------------------" << endl;
	//vytvorenie dynamickeho pola s poctom 'pocet' objektov typu 'Automobil', 
	//k jeho inicializacii sa pouzije bezparametricky konstruktor triedy 'Automobil', ktory musi existovat
    Automobil *p_automobil = new Automobil[pocet];	
    
    i = 0;
	while (i < pocet)
	{
		int local_i = i;
		if (pocet == 1)
		{
			cout << "vlozte nazov firmy prevadyk. autobazar: ";
			cin >> nazov_firmy;
			cout << "vlozte pravnu formu fy. prevadzk. autobazar: ";
			cin >> pravna_forma;
			cout << "vlozte sidlo firmy prevadzk. autobazar: ";
			cin >> sidlo_firmy;
			cout << "vlozte ICO firmy prevadzk. autobazar: ";
			cin >> ico;
			cout << "vlozte DIC firmy prevadzk. autobazar: ";
			cin >> dic;
			cout << "vlozte znacku a typ auta: ";
			cin >> znacka_typ_auta;
			cout << "vlozte rok vyroby auta: ";
			cin >> rok_vyroby_auta;
			cout << "vlozte predajne cislo auta: ";
			cin >> predaj_cis_auta;
            cout << "vlozte predajnu cenu auta: ";
			cin >> cena_auta;
		}
		else
		{
			local_i++;
			cout << "vlozte nazov firmy prevadzk. autobazar s " << local_i << ". predavanym autom   :";
			cin >> nazov_firmy;
			cout << "vlozte pravnu formu fy. prevadzk. autobazar s " << local_i << ". pred. autom   :";
			cin >> pravna_forma;
			cout << "vlozte sidlo firmy prevadzk. autobazar s " << local_i << ". predavanym autom   :";
			cin >> sidlo_firmy;
			cout << "vlozte ICO firmy prevadzk. autobazar s " << local_i << ". predavanym autom     :";
			cin >> ico;
			cout << "vlozte DIC firmy prevadzk. autobazar s " << local_i << ". predavanym autom     :";
			cin >> dic;
			cout << "vlozte znacku a typ " << local_i << ". auta                                    :";
			cin >> znacka_typ_auta;
			cout << "vlozte rok vyroby " << local_i << ". auta                                      :";
			cin >> rok_vyroby_auta;
			cout << "vlozte predajne cislo " << local_i << ". auta                                  :";
			cin >> predaj_cis_auta;
            cout << "vlozte predajnu cenu " << local_i << ". auta                                   :";
			cin >> cena_auta;
            cout << "-----------------------------------------------" << endl;
		}

		(p_automobil + i)->ZmenNazovFirmy(nazov_firmy);
		(p_automobil + i)->ZmenPravnaForma(pravna_forma);
		(p_automobil + i)->ZmenSidloFirmy(sidlo_firmy);
		(p_automobil + i)->ZmenICO(ico);
		(p_automobil + i)->ZmenDIC(dic);
		(p_automobil + i)->ZmenZnackaTypAuta(znacka_typ_auta);
		(p_automobil + i)->ZmenRok_vyroby_auta(rok_vyroby_auta);
		(p_automobil + i)->Zmenpredaj_cis_auta(predaj_cis_auta);
        (p_automobil + i)->ZmenCena_auta(cena_auta);
        i++;
	}

   //vytvorenie objektu 'car' triedy 'Automobil' pomocou volania parametrickeho konstruktora
    cout << endl << "programom vytvoreny a inicializovany objekt pomocou parametrickeho konstruktora triedy 'Automobil': " << endl;
    cout << "-----------------------------------------------" << endl;
    char n[] = "Happy_Autobazar";
    char p[] = "s.r.o";
    char s[] = "Trnava";
    char z[] = "Ford_Monteo";
   
    Automobil car(n, p, s, 19865789, 2586578521, z, 2010, 5897421, 5230);
    cout << car;

    cout << endl << "hodnoty instan. premennych objektov triedy 'Automobil'(aut), vlozene pouzivatelom programu: " << endl;
		//dereferencia ukazovatela '(p_osoba+i)'
		for (int i = 0; i < pocet; i++) {
		    cout << "----------------------------------------------" << endl;
		    cout << *(p_automobil+i);
	}

    cout << "----------------------------------------------" << endl;
   
    //celkova predajna cena vsetkych automobilov a priemerna predajna cena vsetkych automobilov
	celkova_cena = car.VratCena_auta();
	for (int i = 0; i < pocet; i++)
		celkova_cena += (p_automobil+i)->VratCena_auta();

	priemerna_cena = ((float)celkova_cena) / (pocet + 1);
	cout << "celkova predajna cena uvedenych " << pocet + 1 << "-och aut [Eur]: " << celkova_cena << endl;
	cout << "priemerna predajna cena uvedenych " << pocet + 1 << "-och aut [Eur]: " << priemerna_cena << endl;

    //celkova predajna cena vsetkych automobilov, pocet a priemerna cena automobilov starsich ako 12 rokov
	celkova_cena2 = car.VratCena_auta();
    for (int i = 0; i < pocet; i++)
		celkova_cena2 += (p_automobil+i)->VratCena_auta();

    for (i = 0; i < pocet; i++) {
		if ((2025 - (p_automobil+i)->VratRok_vyroby_auta()) > 12) {
			pocet_12rocnych++;
			priemerna_cena2 += (p_automobil+i)->VratCena_auta();
		}
    }
    if ((2025 - car.VratRok_vyroby_auta()) > 12) {
		pocet_12rocnych++;
		priemerna_cena2 += car.VratCena_auta();
	}

    priemerna_cena2 = priemerna_cena2 / (double)(pocet_12rocnych);
    cout << "celkova predajna cena uvedenych " << pocet + 1 << "-och aut [Eur]: " << celkova_cena2 << endl;
	cout << "priemerna predajna cena uvedenych " << pocet_12rocnych << "-och aut starsich ako 12 rokov[Eur]: " << priemerna_cena2 << endl;
	cout << "pocet aut starsich ako 12 rokov " << pocet_12rocnych << endl;
    

    //celkova predajna cena, pocet a priemerna cena automobilov maximalne 4 rocnych
    for (i = 0; i < pocet; i++) 
		if ((2025 - (p_automobil+i)->VratRok_vyroby_auta()) <= 4) {
			pocet_4rocnych++;
            celkova_cena3 += (p_automobil+i)->VratCena_auta();
			priemerna_cena3 += (p_automobil+i)->VratCena_auta();
		}
    
    if ((2025 - car.VratRok_vyroby_auta()) <= 4) {
		pocet_4rocnych++;
        celkova_cena3 += car.VratCena_auta();
		priemerna_cena3 += car.VratCena_auta();
	}

    priemerna_cena3 = priemerna_cena3 / (double)(pocet_4rocnych);
    cout << "celkova predajna cena uvedenych " << pocet_4rocnych << "-och aut maximalne 4 rocnych[Eur]: " << celkova_cena3 << endl;
	cout << "priemerna predajna cena uvedenych " << pocet_4rocnych << "-och aut maximalne 4 rocnych[Eur]: " << priemerna_cena3 << endl;
	cout << "pocet aut maximalne 4 rocnych " << pocet_4rocnych << endl;
    //zmazanie 1-rozmerneho dynamickeho pola, na ktore ukazuje ukazovatel 'p_automobil', z pamate
	delete[] p_automobil;
    
return 0;
}

A3 skuska- vloz rok:

#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

/********************* definicie tried programu ***************************/
//DEKLARACIA TRIEDY FIRMAAUTOBAZAR
class FirmaAutobazar
{
  private:
    //PRIVATNE CLENSKE PREMENNE
    char nazov_firmy[30], pravna_forma[10], sidlo_firmy[30];
    public:	
    //bezparametricky konstruktor- pouzije sa na vytvorenie objektov	
	FirmaAutobazar() {}
    //bezparametricky destruktor 
    ~FirmaAutobazar() {}
	//explicitny parametricky konstruktor
    FirmaAutobazar(char *, char *, char *);
    //CLENSKE FUNKCIE
    char *VratNazovFirmy(); 
    char *VratPravnaForma();
    char *VratSidloFirmy();
    void ZmenNazovFirmy(char *);
    void ZmenPravnaForma(char *);
    void ZmenSidloFirmy(char *);
};

//DEKLARACIA TRIEDY AUTOMOBIL
class Automobil:public FirmaAutobazar	
{
   private:
    //PRIVATNE CLENSKE PREMENNE
     char znacka_typ_auta[30];
     int rok_vyroby_auta, predaj_cis_auta; 
     long int cena_auta;
   public:
    //bezparametricky konstruktor- pouzije sa na vytvorenie objektov	
    Automobil() {}
    //bezparametricky destruktor
	~Automobil() {}
	 //explicitny parametricky konstruktor
     Automobil(char *, char *, char *, char*, int, int, long int);
	 //CLENSKE FUNKCIE
     char *VratZnackaTypAuta();		
     int VratRok_vyroby_auta();
     int Vratpredaj_cis_auta(); 
     long int VratCena_auta(); 
     void ZmenZnackaTypAuta(char *r);
     void ZmenRok_vyroby_auta(int);
     void Zmenpredaj_cis_auta(int);
     void ZmenCena_auta(long int);

    //OPERATOROVA FUNKCIA PREPISANEHO OPERATORA BITOVEHO POSUVU
	friend ostream& operator<<(ostream &vyst_prud, Automobil a);
};

/*********** definicie clenskych funkcii tried ************/
//definicia parametrickeho konstruktora triedy 'FirmaAutobazar'
FirmaAutobazar::FirmaAutobazar(char *nf, char *pf, char *sf)
{
	strcpy(nazov_firmy, nf);
	strcpy(pravna_forma, pf);
    strcpy(sidlo_firmy, sf);
}

char* FirmaAutobazar::VratNazovFirmy()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, nazov_firmy);
	return pom;
}

char* FirmaAutobazar::VratPravnaForma()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, pravna_forma);
	return pom;
}

char* FirmaAutobazar::VratSidloFirmy()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, sidlo_firmy);
	return pom;
}

void FirmaAutobazar::ZmenNazovFirmy(char* nf)
{
	strcpy(nazov_firmy, nf);
}

void FirmaAutobazar::ZmenPravnaForma(char* pf)
{
	strcpy(pravna_forma, pf);
}

void FirmaAutobazar::ZmenSidloFirmy(char* sf)
{
	strcpy(sidlo_firmy, sf);
}

//definicia parametrickeho konstruktora triedy 'Automobil'
Automobil::Automobil(char *nf, char *pf, char *sf, char* zta, int rva, int pca, long int ca) : FirmaAutobazar(nf, pf, sf)
{
	strcpy(znacka_typ_auta, zta);
	rok_vyroby_auta = rva;
    predaj_cis_auta = pca;
    cena_auta = ca;
}

char* Automobil::VratZnackaTypAuta()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, znacka_typ_auta);
	return pom;
}

int Automobil::VratRok_vyroby_auta()
{
	return rok_vyroby_auta;
}

int Automobil::Vratpredaj_cis_auta()
{
	return predaj_cis_auta;
}

long int Automobil::VratCena_auta()
{
	return cena_auta;
}

void Automobil::ZmenZnackaTypAuta(char* zta)
{
	strcpy(znacka_typ_auta, zta);
}

void Automobil::ZmenRok_vyroby_auta(int rva)
{
	rok_vyroby_auta = rva;
}

void Automobil::Zmenpredaj_cis_auta(int pca)
{
	predaj_cis_auta = pca;
}

void Automobil::ZmenCena_auta(long int ca)
{
	cena_auta = ca;
}

//defin. neclensk. spriatelenej operatorovej funkcie prepisaneho operatora << pre obj. tr. 'Automobil'
ostream& operator<<(ostream& vyst_prud, Automobil a)
{
	vyst_prud 
        << "nazov firmy prevadzk. autobazar s predavanym autom     : " << a.VratNazovFirmy() << endl
		<< "sidlo firmy prevadz. autobazar s predavanym autom      : " << a.VratSidloFirmy() << endl				
		<< "znacka a typ auta                                      : " << a.VratZnackaTypAuta() << endl
		<< "rok vyroby auta	                                       : " << a.VratRok_vyroby_auta() << endl
        << "predajne cislo auta	                                   : " << a.Vratpredaj_cis_auta() << endl
		<< "predajna cena auta [Eur]     	                       : " << a.VratCena_auta() << endl;
	return vyst_prud;
}

int main() 
{
    char nazov_firmy [100], pravna_forma [100], sidlo_firmy [100], znacka_typ_auta [100];
	int rok_vyroby_auta, predaj_cis_auta, pocet, i, pocet_hladanych=0, rok_vyroby;
    long int cena_auta;
    double priemerna_cena = 0;

    cout << "kolko automobilov chcete vkladat do programu? ";
    cin >> pocet;
	cout << "-----------------------------------------------" << endl;
	//vytvorenie dynamickeho pola s poctom 'pocet' objektov typu 'Automobil', 
	//k jeho inicializacii sa pouzije bezparametricky konstruktor triedy 'Automobil', ktory musi existovat
    Automobil *p_automobil = new Automobil[pocet];	
    
    i = 0;
	while (i < pocet)
	{
		int local_i = i;
		if (pocet == 1)
		{
			cout << "vlozte nazov firmy prevadyk. autobazar: ";
			cin >> nazov_firmy;
			cout << "vlozte pravnu formu fy. prevadzk. autobazar: ";
			cin >> pravna_forma;
			cout << "vlozte sidlo firmy prevadzk. autobazar: ";
			cin >> sidlo_firmy;
			cout << "vlozte znacku a typ auta: ";
			cin >> znacka_typ_auta;
			cout << "vlozte rok vyroby auta: ";
			cin >> rok_vyroby_auta;
			cout << "vlozte predajne cislo auta: ";
			cin >> predaj_cis_auta;
            cout << "vlozte predajnu cenu auta: ";
			cin >> cena_auta;
		}
		else
		{
			local_i++;
			cout << "vlozte nazov firmy prevadzk. autobazar s " << local_i << ". predavanym autom   :";
			cin >> nazov_firmy;
			cout << "vlozte pravnu formu fy. prevadzk. autobazar s " << local_i << ". pred. autom   :";
			cin >> pravna_forma;
			cout << "vlozte sidlo firmy prevadzk. autobazar s " << local_i << ". predavanym autom   :";
			cin >> sidlo_firmy;
			cout << "vlozte znacku a typ " << local_i << ". auta                                    :";
			cin >> znacka_typ_auta;
			cout << "vlozte rok vyroby " << local_i << ". auta                                      :";
			cin >> rok_vyroby_auta;
			cout << "vlozte predajne cislo " << local_i << ". auta                                  :";
			cin >> predaj_cis_auta;
            cout << "vlozte predajnu cenu " << local_i << ". auta                                   :";
			cin >> cena_auta;
            cout << "-----------------------------------------------" << endl;
		}

		(p_automobil + i)->ZmenNazovFirmy(nazov_firmy);
		(p_automobil + i)->ZmenPravnaForma(pravna_forma);
		(p_automobil + i)->ZmenSidloFirmy(sidlo_firmy);
		(p_automobil + i)->ZmenZnackaTypAuta(znacka_typ_auta);
		(p_automobil + i)->ZmenRok_vyroby_auta(rok_vyroby_auta);
		(p_automobil + i)->Zmenpredaj_cis_auta(predaj_cis_auta);
        (p_automobil + i)->ZmenCena_auta(cena_auta);
        i++;
	}

   //vytvorenie objektu 'car' triedy 'Automobil' pomocou volania parametrickeho konstruktora
    cout << endl << "programom vytvoreny a inicializovany objekt pomocou parametrickeho konstruktora triedy 'Automobil': " << endl;
    cout << "-----------------------------------------------" << endl;
    char n[] = "Happy_Autobazar";
    char p[] = "s.r.o";
    char s[] = "Trnava";
    char z[] = "Ford_Monteo";
   
    Automobil car(n, p, s, z, 2010, 589742, 5230);
    cout << car;

    cout << endl << "hodnoty instan. premennych objektov triedy 'Automobil'(aut), vlozene pouzivatelom programu: " << endl;
		//dereferencia ukazovatela '(p_osoba+i)'
		for (int i = 0; i < pocet; i++) {
		    cout << "----------------------------------------------" << endl;
		    cout << *(p_automobil+i);
	}

    cout << "----------------------------------------------" << endl;
   
    cout << "rok vyroby aut: ";
    cin >> rok_vyroby;
    
    cout << endl<< "Zoznam aut starsich ako " << rok_vyroby << ":" << endl;

    for (i = 0; i < pocet; i++) 
		if (((p_automobil+i)->VratRok_vyroby_auta()) <= rok_vyroby) {
			pocet_hladanych++;
			priemerna_cena += (p_automobil+i)->VratCena_auta();
            cout <<endl<< *(p_automobil + i);
		}
    
    if (car.VratRok_vyroby_auta() <= rok_vyroby) {
		pocet_hladanych++;
		priemerna_cena += car.VratCena_auta();
        cout <<endl<< *(p_automobil + i);
	}

    priemerna_cena = priemerna_cena / (double)(pocet_hladanych);
	cout <<endl<< "priemerna predajna cena uvedenych " << pocet_hladanych << "-och aut maximalne "<<(2025 - rok_vyroby)<<"rocnych[Eur]: " << priemerna_cena << endl;
	cout << "pocet aut maximalne "<<(2025 - rok_vyroby)<<" rocnych " << pocet_hladanych << endl;
    //zmazanie 1-rozmerneho dynamickeho pola, na ktore ukazuje ukazovatel 'p_automobil', z pamate
	delete[] p_automobil;
    
return 0;
}

B3 zakladne --  zisti a zobrazi pocet a zoznam zvierat starsich ako pouzivatelom zadany vek


#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

/********************* definicie tried programu ***************************/
//DEKLARACIA TRIEDY ZOO
class ZOO
{
  private:
    //PRIVATNE CLENSKE PREMENNE
    char nazov_firmy[30], pravna_forma[10];
    long ICO, rozloha, pocet_zvierat;
    public:	
    //bezparametricky konstruktor- pouzije sa na vytvorenie objektov	
	ZOO() {}
    //bezparametricky destruktor 
    ~ZOO() {}
	//explicitny parametricky konstruktor
    ZOO(char *, char *, long, long, long);
    //CLENSKE FUNKCIE
    char *VratNazovFirmy(); 
    char *VratPravnaForma();
    long VratICO(); 
    long VratRozloha();
    long VratPocetZvierat();   
    void ZmenNazovFirmy(char *);
    void ZmenPravnaForma(char *);
    void ZmenICO(long);
    void ZmenRozloha(long);
    void ZmenPocetZvierat(long);
};

//DEKLARACIA TRIEDY ZVIERA
class Zviera:public ZOO	
{
   private:
    //PRIVATNE CLENSKE PREMENNE
     char nazov_zvierata[30];
     long cislo_zvierata, vek_zvierata, hodnota_zvierata;
   public:
    //bezparametricky konstruktor- pouzije sa na vytvorenie objektov	
    Zviera() {}
    //bezparametricky destruktor
	~Zviera() {}
	 //explicitny parametricky konstruktor
     Zviera(char *, char *, long, long, long, char *, long, long, long int);
	 //CLENSKE FUNKCIE
     char *VratNazovZvierata();		
     long VratCisloZvierata(); 
     long VratVekZvierata(); 
     long int VratHodnotaZvierata(); 
     void ZmenNazovZvierata(char *);		
     void ZmenCisloZvierata(long); 
     void ZmenVekZvierata(long); 
     void ZmenHodnotaZvierata(long int);

    //OPERATOROVA FUNKCIA PREPISANEHO OPERATORA BITOVEHO POSUVU
	friend ostream& operator<<(ostream &vyst_prud, Zviera z);
};

/*********** definicie clenskych funkcii tried ************/
//definicia parametrickeho konstruktora triedy 'ZOO'
ZOO::ZOO(char *nf, char *pf, long i, long r, long p)
{
	strcpy(nazov_firmy, nf);
	strcpy(pravna_forma, pf);
    ICO = i;
    rozloha = r;
    pocet_zvierat = p;
}

char* ZOO::VratNazovFirmy()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, nazov_firmy);
	return pom;
}

char* ZOO::VratPravnaForma()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, pravna_forma);
	return pom;
}

long ZOO::VratICO()
{
	return ICO;
}

long ZOO::VratRozloha()
{
	return rozloha;
}

long ZOO::VratPocetZvierat()
{
	return pocet_zvierat;
}

void ZOO::ZmenNazovFirmy(char* nf)
{
	strcpy(nazov_firmy, nf);
}

void ZOO::ZmenPravnaForma(char* pf)
{
	strcpy(pravna_forma, pf);
}

void ZOO::ZmenICO(long i)
{
	ICO = i;
}

void ZOO::ZmenRozloha(long r)
{
	rozloha = r;
}

void ZOO::ZmenPocetZvierat(long p)
{
	pocet_zvierat = p;
}

//definicia parametrickeho konstruktora triedy 'Zviera'
Zviera::Zviera(char *nf, char *pf, long i, long r, long p, char* nz, long cz, long vz, long int hz) : ZOO(nf, pf, i, r, p)
{
	strcpy(nazov_zvierata, nz);
	cislo_zvierata = cz;
    vek_zvierata = vz;
    hodnota_zvierata = hz;
}

char* Zviera::VratNazovZvierata()
{
	char* pom;
	pom = new char[30];
	strcpy(pom, nazov_zvierata);
	return pom;
}

long Zviera::VratCisloZvierata()
{
	return cislo_zvierata;
}

long Zviera::VratVekZvierata()
{
	return vek_zvierata;
}

long Zviera::VratHodnotaZvierata()
{
	return hodnota_zvierata;
}

void Zviera::ZmenNazovZvierata(char* nz)
{
	strcpy(nazov_zvierata, nz);
}

void Zviera::ZmenCisloZvierata(long cz)
{
	cislo_zvierata = cz;
}

void Zviera::ZmenVekZvierata(long vz)
{
	vek_zvierata = vz;
}

void Zviera::ZmenHodnotaZvierata(long int hz)
{
	hodnota_zvierata = hz;
}


//defin. neclensk. spriatelenej operatorovej funkcie prepisaneho operatora << pre obj. tr. 'Zviera'
ostream& operator<<(ostream& vyst_prud, Zviera z)
{
	vyst_prud 
        << "nazov ZOO kde je zviera umiestnene            : " << z.VratNazovFirmy() << endl
		<< "pravna forma ZOO, kde je zviera umiestnene    : " << z.VratPravnaForma() << endl
		<< "rozloha ZOO, kde je zviera umiestnene         : " << z.VratRozloha() << endl		
		<< "pocet zvierat v ZOO, kde je zviera umiestnene : " << z.VratPocetZvierat() << endl		
		<< "zviera                                        : " << z.VratNazovZvierata() << endl
		<< "cislo zvierata	                              : " << z.VratCisloZvierata() << endl
        << "vek zvierata                                  : " << z.VratVekZvierata() << endl
		<< "spolocenska hodnota zvierata[Eur]     	      : " << z.VratHodnotaZvierata() << endl;
	return vyst_prud;
}

int main() 
{
    char nazov_firmy [100], pravna_forma [100], nazov_zviera [100];
	int  pocet, i, vek, pocet_rocnych;
    long ico, rozloha, pocet_zvierat, cislo_zvierata, vek_zvierata;
    long long celkova_cena = 0;
    long int hodnota_zvierata;

    cout << "kolko zvierat chcete vkladat do programu? ";
    cin >> pocet;
	cout << "-----------------------------------------------" << endl;
	//vytvorenie dynamickeho pola s poctom 'pocet' objektov typu 'Zviera', 
	//k jeho inicializacii sa pouzije bezparametricky konstruktor triedy 'Zviera', ktory musi existovat
    Zviera *p_zviera = new Zviera[pocet];	
    
    i = 0;
	while (i < pocet)
	{
		int local_i = i;
		if (pocet == 1)
		{
			cout << "vlozte nazov ZOO: ";
			cin >> nazov_firmy;
			cout << "vlozte pravnu formu ZOO: ";
			cin >> pravna_forma;
			cout << "vlozte ICO ZOO: ";
			cin >> ico;
			cout << "vlozte rozlohu ZOO: ";
			cin >> rozloha;
			cout << "vlozte pocet zvierat v ZOO: ";
			cin >> pocet_zvierat;
			cout << "vlozte zviera: ";
			cin >> nazov_zviera;
			cout << "vlozte cislo zvierata: ";
			cin >> cislo_zvierata;
            cout << "vlozte vek zvierata: ";
			cin >> vek_zvierata;
            cout << "vlozte spoloc. hodnotu [EUR]: ";
			cin >> hodnota_zvierata;
		}
		else
		{
			local_i++;
			cout << "vlozte nazov nazov ZOO, kde je " << local_i << ". zviera                 :";
			cin >> nazov_firmy;
			cout << "vlozte pravnu formu ZOO, kde je " << local_i << ". zviera umiestnene     :";
			cin >> pravna_forma;
			cout << "vlozte ICO ZOO, kde je " << local_i << ". zviera umiestnene              :";
			cin >> ico;
			cout << "vlozte rozlohu ZOO, kde je " << local_i << ". zviera umiestnene [ha]     :";
			cin >> rozloha;
			cout << "vlozte pocet zvierat v ZOO, kde je " << local_i << ". zviera umiestnene  :";
			cin >> pocet_zvierat;
			cout << "vlozte " << local_i << ". zviera                                         :";
			cin >> nazov_zviera;
			cout << "vlozte cislo " << local_i << ". zvierata                                 :";
			cin >> cislo_zvierata;
			cout << "vlozte vek " << local_i << ". zvierata                                   :";
			cin >> vek_zvierata;
            cout << "vlozte spoloc. hodnotu " << local_i << ". zvierata [EUR]                 :";
			cin >> hodnota_zvierata;
            cout << "-----------------------------------------------" << endl;
		}

		//pomocou adresovej aritmetiky '(p_osoba+i)' sa dostaneme, napr. k prvku pola 'Zamestnanec[pocet]'  
		//s indexom 1, ak je i==1, cize k objektu s indexom 1 ulozenemu v tomto poli
		(p_zviera + i)->ZmenNazovFirmy(nazov_firmy);
		(p_zviera + i)->ZmenPravnaForma(pravna_forma);
		(p_zviera + i)->ZmenICO(ico);
		(p_zviera + i)->ZmenRozloha(rozloha);
		(p_zviera + i)->ZmenPocetZvierat(pocet_zvierat);
		(p_zviera + i)->ZmenNazovZvierata(nazov_zviera);
		(p_zviera + i)->ZmenCisloZvierata(cislo_zvierata);
		(p_zviera + i)->ZmenVekZvierata(vek_zvierata);
        (p_zviera + i)->ZmenHodnotaZvierata(hodnota_zvierata);
        i++;
	}

   //vytvorenie objektu 'car' triedy 'Automobil' pomocou volania parametrickeho konstruktora
    cout << endl << "programom vytvoreny a inicializovany objekt pomocou parametrickeho konstruktora triedy 'Zviera': " << endl;
    cout << "-----------------------------------------------" << endl;
    char n[] = "ZOO_Kosice";
    char p[] = "verejno_pravna";
    char z[] = "slon_africky";
   
    Zviera zviera(n, p, 19865789, 98, 283, z, 5897421, 15, 22000);
    cout << zviera;

    cout << endl << "hodnoty instan. premennych objektov triedy 'Zviera'(zvierat), vlozene pouzivatelom programu: " << endl;
		//dereferencia ukazovatela '(p_osoba+i)'
		for (int i = 0; i < pocet; i++) {
		    cout << "----------------------------------------------" << endl;
		    cout << *(p_zviera+i);
	}

    cout << "----------------------------------------------" << endl;
   
    //zisti a zobrazi pocet a zoznam zvierat starsich ako pouzivatelom zadany vek
    cout << "--------------------------------------------------------------" << endl;
    cout << "vlozte vek od ktoreho maju byt vyhladane zvierata starsie? ";
    cin >> vek;
    cout << endl << endl <<"pocet a zoznam zvierat starsich ako "<<vek<< " rokov"<< endl;
		//dereferencia ukazovatela '(p_osoba+i)'
        if ((zviera.VratVekZvierata()) > 12) {
		    pocet_rocnych++;
		    celkova_cena += zviera.VratHodnotaZvierata();
            cout << zviera;
            cout << "----------------------------------------------" << endl;
        }

		for (int i = 0; i < pocet; i++) {
            if ((p_zviera+i)->VratVekZvierata() > 12)
            {
			pocet_rocnych++;
			celkova_cena += (p_zviera+i)->VratHodnotaZvierata();
		    cout << *(p_zviera+i);
            cout << "----------------------------------------------" << endl;
            }
	}

    //celkova spolocenska hodnota najdenych zvierat
	cout << "celkova spolocenska hodnota najdenych " << pocet_rocnych << " zvierat [Eur]: " << celkova_cena << endl;

    //zmazanie 1-rozmerneho dynamickeho pola, na ktore ukazuje ukazovatel 'p_zviera', z pamate
	delete[] p_zviera;
    
return 0;
}