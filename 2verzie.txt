A2- //program vyhlada studentov s pouzivatelom pozadovanym ROKOM NARODENIA a POZADOVANOU DOSIAHNUTOU ZNAMKOU


#include <fstream>
#include <iostream>
#include <string>
using namespace std;

//programatorom definovany datovy typ struct TStudent
struct Tstudent
{
	char meno[20], priezvisko[20];
    //znamka_M[2] je príliš krátke na uloženie známky ako "FX" (potrebuje 3 znaky vrátane ukončovacieho znaku \0).
    //rodcis[6] je tiež príliš krátke, pretože rodné číslo má 6 znakov + ukončovací znak \0, čo vyžaduje minimálne rodcis[7]
	char znamka_M[3]; // 'A', 'B', 'C', 'D', 'E', 'FX'
    //rodcis ako retazec aby sa vypisala 0 pri vypise rodneho cisla
	char rodcis[7];
};

//pomocou tejto funkcie dokaze z rodneho cisla studenta zistit ci je nositelom muz alebo zena
//Kľúčové slovo const pred char* v C++ označuje, že ukazovateľ na reťazec nemôže meniť obsah, na ktorý ukazuje. 
//To znamená, že reťazec, ktorý je odovzdaný funkcii ako argument, zostane nezmenený počas celej doby vykonávania funkcie.
int JeZena(const char *rc)
{
    int cislo = atoi(rc);
	cislo /= 1000; // odstranime posledne 3 cislice
	cislo %= 10; // z toho, co zostalo, chceme poslednu
	return cislo >= 5; // ak plati, je to zena, inak muz
}

//funkcia zisti a vrati volajucemu rok z rodneho cisla 
int rok(const char *rc)
{
    int cislo = atoi(rc);
    int RR = (cislo / 10000);
	if (RR < 12) 
        return RR + 2000;
	else 
        return RR + 1900;
}

//funkcia zisti datum narod. z rod. c. a vypise ho na konzolu v pozad. tvare
void VypisDatum(const char *rc)
{
    int cislo = atoi(rc);
	cout << cislo % 100 << ". ";
	int mesiac = cislo / 100;
	cout << mesiac % 50 << ". ";
    cout << rok(rc);
}

//funkcia vypise data 1 studenta v pozadovanom tvare na konzolu s rozlisenim pohlavia studenta, 
//funkc. moze volat jezena a vypisdatum
void vypis_studenta(Tstudent *s)
{
    cout<<s->priezvisko <<" "<<s->meno<<" \t("<<s->znamka_M<<")  ";
    cout<<"rod.c: "<<s->rodcis;
    if (JeZena(s->rodcis))
		cout << " zena, narodena ";
	else
		cout << " muz, narodeny ";
    VypisDatum(s->rodcis);
	cout << endl;   
}

//funkcia vypise zoznam studentov v pozadovanom tvare na konzolu, moze volat dunkcie jezena a vypisdatum
void vypis_studentov(Tstudent **st, int poc) 
{
	for (int i = 0; i < poc; i++)
		vypis_studenta(st[i]);
}

//porovnavacia funkcia volana vo funkcii insertionsort, ktora porovna dvoch studentov podla zadanych kriterii
int PorovnajStudentov(Tstudent *s1, Tstudent *s2) 
{
    //Funkcia strcmp porovná reťazce s1->priezvisko a s2->priezvisko.
    //Výsledok uloží do premennej porovnanie:
    //Ak je s1->priezvisko menšie než s2->priezvisko, strcmp vráti hodnotu < 0.
    //Ak sú reťazce rovnaké, vráti 0.
    //Ak je s1->priezvisko väčšie než s2->priezvisko, vráti hodnotu > 0.
    //Ak sa priezviská nerovnajú (porovnanie != 0), funkcia okamžite vráti hodnotu porovnanie.
	int porovnanie = strcmp(s1->priezvisko, s2->priezvisko);
    //ak sa nerovnaju
	if (porovnanie != 0) 
		return porovnanie;

    //porovnanie mien ak sa priezviska rovnaju
	porovnanie = strcmp(s1->meno, s2->meno);
    //ak sa nerovnaju
	if (porovnanie != 0) 
		return porovnanie;

	// Porovnanie roku narodenia pomocou funkcie rok()
    int rokS1 = rok(s1->rodcis);
    int rokS2 = rok(s2->rodcis);
    if (rokS1 < rokS2) 
        return -1; // s1 je starší
    if (rokS1 > rokS2) 
        return 1;  // s2 je starší

	// Ak je všetko rovnaké, zachová sa pôvodné poradie
	return 0;

}

//funkcia usporiada 2rozmerne dyn. pole pomocou algoritmu insertionsort. vola funkciu porovnajstudentov
void InsertionSort(Tstudent **pole, int pocet)
{
    for (int i = 1; i < pocet; i++)
    {
        int j = i;
        Tstudent *tmp = pole[j];
        int por;
        //Funkcia PorovnajStudentov sa volá pri každej iterácii cyklu while, 
        //čím sa zabezpečí, že porovnanie medzi aktuálnymi prvkami a tmp je vždy aktuálne.
        while (j > 0 && PorovnajStudentov(pole[j - 1], tmp) > 0)
        {
            pole[j] = pole[j - 1];
            j--;
        }
        pole[j] = tmp;
    }

}

int main() 
{
    //100 prvkove pole ukazovatelov na datovy typ Tstudent vytvorene na ukladanie
    //strukturovych premennych obsahujucich data o studentoch ulozene v subore studenti.txt
	Tstudent **student = new Tstudent*[100];
    int i = 0, pocet;
	ifstream in;

    //overenie ci sa da otvorit subor
	in.open("studenti_sk.txt");
	if( !in )
	{
		cout<<"Subor sa nepodarilo otvorit";
		return 0;
	}

    //ak sa da otvorit, zo suboru studenti.txt si program nacita do strukturovych premennych
    //ulozenych v dvojrozmernom dyn. poli data o kazdom studentovi
    //(potom do kazdeho z tychto prvkov vlozi ukazovatel na strukturovu premennu a datami jedneho studenta)
    //vytvori len tolko kolko je studentov v zozname
    //subor moze obsahovat zaznamy o max. 100 studentoch
	while( !in.eof() && i < 100 )
	{
		student[i] = new Tstudent;
		in >> student[i]->meno >> student[i]->priezvisko >> student[i]->znamka_M >> student[i]->rodcis;
		i++;
	}

    pocet = i-1;

    //NEUSPORIADANY VYPIS zoznamu studentov nachadzajucich sa v subore na konzolu v pozadovanom tvare 
    //s uvedenim pohlavia studenta, pricom taktiez zisti a vypise pocet studentov, ktorych data nasiel v tomto subore
    cout << " neusporiadany zoznam " << pocet << " studentov zo suboru 'studenti.txt'" << endl;
	vypis_studentov(student, pocet);
    
    //USPORIADANY VYPIS
    //nasledne program usporiada studentov ulozenych v 2 rozmernom dyn. poli strukturovych premennych pomocou volania funkkcie
    //insertionsort v ktorej je implementovany algoritmus insertion sort podla nasledujucih poziadaviek
    //zoznam bude usporiadany abecedne podla priezvisk
    //ak su priezviska rovnake bude usporiadany podla mien
    //ak su mena rovnake, bude usporiadany podla roku narodenia, najprv je zobrazeny starsi student potom mladsi
    //ak maju vsetko rovnake, tak su ulozeni v poradi v akom ich program nasiel
    InsertionSort(student, pocet);
	cout << endl;
	cout << " USPORIADANY zozn. " << pocet << " studentov zo sub. 'studenti.txt' funkciou 'InsertionSort'" << endl;
	vypis_studentov(student, pocet);
	cout << "------------------------------" << endl;
	
    //program vyhlada studentov s pouzivatelom pozadovanym ROKOM NARODENIA a POZADOVANOU DOSIAHNUTOU ZNAMKOU
    cout << "vlozte rok narodenia hladanych studentov:";
	int rok_hl;
	cin >> rok_hl;

    //program odmietne pouzivatelom vlozeny rok narodenia mimo interval
	if (rok_hl >= 1912 && rok_hl <= 2011) 
    {
        cout << "vlozte znamku, ktoru maju mat hladani studenti:";
        char znamka[3];
	    cin >> znamka;

        //pre ukladanie strukturovych premennych obsahujucich zaznamy najdenych studentov si program 
        //vytvori dvojrozmerne dyn. pole, ktore po ukonceni jeho pouzivania nemusi zmazat
        //Dynamicky sa alokuje pamäť pre pole ukazovateľov na Tstudent. Toto pole neobsahuje nové objekty 
        //typu Tstudent, iba ukazovatele na existujúce objekty v poli student
        Tstudent** nove= new Tstudent*[pocet];

		int pocet_hlad = 0;

		for (int i = 0; i < pocet; i++) 
        {
            //Funkcia strcmp porovná obsah reťazcov a vracia 0, ak sú rovnaké.
			if (rok(student[i]->rodcis) == rok_hl && strcmp(student[i]->znamka_M, znamka) == 0) 
            {
                //nove[pocet_hlad] = student[i];
                //pocet_hlad++; tento vyraz je ekvivalentny s tym nizsie, lebo nizsi je postincrement
				nove[pocet_hlad++] = student[i];
			}
		}

        if (pocet_hlad > 0)
        {
            //ak program takychto studentov najde vypise ich zoznam na konzolu a skonci
            cout <<endl<< "Pocet a zoznam studentov narodenych v roku " << rok_hl << " so znamkou " << znamka << ": " << pocet_hlad << endl;
            vypis_studentov(nove, pocet_hlad);
        }
        else
        {
            //ak takyto studenti nie su, ale rok je z intervalu vypise sa hlaska a program skonci
            cout <<endl<< "pocet studentov narodenych v roku " << rok_hl << " so znamkou: " << znamka << " 0" << endl;
        }

        //pole nove nevyžaduje rovnaké mazanie ako pole student, pretože pole nove neobsahuje nové dynamicky alokované objekty, 
        //ale iba ukazovatele na existujúce objekty v poli student
        //delete[] nove;
        delete[] nove;
		        
	}
    
    //ak je rok mimo interval, vypise hlasku a skonci
    else
        {
            cout << "Vloz rok z intervalu <1912, 2011>" << endl;
        }

//delete student[i]:
//Uvoľňuje pamäť alokovanú pre každý jednotlivý objekt typu Tstudent.
//delete[] student:
//Uvoľňuje pamäť alokovanú pre samotné pole ukazovateľov (Tstudent** student).
   for (int i = 0; i < pocet; i++)
{
    if (student[i] != nullptr)
        delete student[i];
}

//Uvoľňuje zdroje spojené s otvoreným súborom
    in.close();
}


A2- sk- najdi studenta pohlavie, rok narodenia


#include <fstream>
#include <iostream>
#include <string>
using namespace std;

struct Tstudent
{
    char meno[20], priezvisko[20];
    char znamka_M[3];
    char rodcis[7];
};

int JeZena(const char *rc)
{
    int cislo = atoi(rc);
    cislo /= 1000;
    cislo %= 10;
    return cislo >= 5;
}

int rok(const char *rc)
{
    int cislo = atoi(rc);
    int RR = (cislo / 10000);
    if (RR < 22)
        return RR + 2000;
    else
        return RR + 1900;
}

void VypisDatum(const char *rc)
{
    int cislo = atoi(rc);
    cout << cislo % 100 << ". ";
    int mesiac = cislo / 100;
    cout << mesiac % 50 << ". ";
    cout << rok(rc);
}

void vypis_studenta(Tstudent *s)
{
    cout << s->priezvisko << " " << s->meno << " \t(" << s->znamka_M << ")  ";
    cout << "rod.c: " << s->rodcis;
    if (JeZena(s->rodcis))
        cout << " zena, narodena ";
    else
        cout << " muz, narodeny ";
    VypisDatum(s->rodcis);
    cout << endl;
}

void vypis_studentov(Tstudent **st, int poc)
{
    for (int i = 0; i < poc; i++)
        vypis_studenta(st[i]);
}

int PorovnajStudentov(Tstudent *s1, Tstudent *s2)
{
    int porovnanie = strcmp(s1->priezvisko, s2->priezvisko);
    if (porovnanie != 0)
        return porovnanie;

    porovnanie = strcmp(s1->meno, s2->meno);
    if (porovnanie != 0)
        return porovnanie;

    int rokS1 = rok(s1->rodcis);
    int rokS2 = rok(s2->rodcis);
    if (rokS1 < rokS2)
        return -1;
    if (rokS1 > rokS2)
        return 1;

    return 0;
}

void InsertionSort(Tstudent **pole, int pocet)
{
    for (int i = 1; i < pocet; i++)
    {
        int j = i;
        Tstudent *tmp = pole[j];
        int por;
        while (j > 0 && PorovnajStudentov(pole[j - 1], tmp) > 0)
        {
            pole[j] = pole[j - 1];
            j--;
        }
        pole[j] = tmp;
    }

}

int najdi_studenta(Tstudent *s, int pohl, int rokNarod)
{
    int jeZena = JeZena(s->rodcis);
    int rokStudent = rok(s->rodcis);

    //ak znamka: if (rokStudent <= rokNarod && strcmp(s->znamka_M, znamka) == 0)
    if (((pohl == 'z' && jeZena) || (pohl == 'm' && !jeZena)) && rokStudent <= rokNarod)
    {
        return 1;
    }
    return 0;
}

int main()
{
    Tstudent **student = new Tstudent *[100];
    int i = 0, pocet;
    ifstream in;

    in.open("studenti_sk.txt");
    if (!in)
    {
        cout << "Subor sa nepodarilo otvorit";
        return 0;
    }

    while (!in.eof() && i < 100)
    {
        student[i] = new Tstudent;
        in >> student[i]->meno >> student[i]->priezvisko >> student[i]->znamka_M >> student[i]->rodcis;
        i++;
    }

    pocet = i - 1;

    cout << " neusporiadany zoznam " << pocet << " studentov zo suboru 'studenti.txt'" << endl;
    vypis_studentov(student, pocet);

    InsertionSort(student, pocet);
    cout << endl;

    cout << " USPORIADANY zozn. " << pocet << " studentov zo sub. 'studenti.txt' funkciou 'SelectionSort'" << endl;
    vypis_studentov(student, pocet);
    cout << "------------------------------" << endl;

    cout << "vlozte pohlavie hladanych studentov (z/m):";
    char pohlavie;
    cin >> pohlavie;


    cout << "vlozte rok narodenia hladanych studentov:";
    int rok_hl;
    cin >> rok_hl;

    Tstudent **nove = new Tstudent *[pocet];
    int pocet_hlad = 0;

    for (int i = 0; i < pocet; i++)
    {
        if (najdi_studenta(student[i], pohlavie, rok_hl))
        {
            nove[pocet_hlad++] = student[i];
        }
    }

    if (pocet_hlad > 0)
    {
        cout << endl
             << "Pocet a zoznam studentov s pohlavim " << (pohlavie == 'z' ? "zena" : "muz") << " narodenych v roku "
             << rok_hl << " a starsich: " << pocet_hlad << endl;
        vypis_studentov(nove, pocet_hlad);
    }
    else
    {
        cout << endl
             << "Pocet studentov s pohlavim " << (pohlavie == 'z' ? "zena" : "muz") << " narodenych v roku " << rok_hl
             << " a starsich: 0" << endl;
    }

    delete[] nove;

    for (int i = 0; i < pocet; i++)
    {
        if (student[i] != nullptr)
            delete student[i];
    }

    in.close();
    return 0;
}


B2— //program vyhlada studentov s pouzivatelom pozadovanym POHLAVIM a POZADOVANOU DOSIAHNUTOU ZNAMKOU

#include <fstream>
#include <iostream>
#include <string>
using namespace std;

//programatorom definovany datovy typ struct TStudent
struct Tstudent
{
	char meno[20], priezvisko[20];
    //znamka_M[2] je príliš krátke na uloženie známky ako "FX" (potrebuje 3 znaky vrátane ukončovacieho znaku \0).
    //rodcis[6] je tiež príliš krátke, pretože rodné číslo má 6 znakov + ukončovací znak \0, čo vyžaduje minimálne rodcis[7]
	char znamka_M[3]; // 'A', 'B', 'C', 'D', 'E', 'FX'
    //rodcis ako retazec aby sa vypisala 0 pri vypise rodneho cisla
	char rodcis[7];
};

//pomocou tejto funkcie dokaze z rodneho cisla studenta zistit ci je nositelom muz alebo zena
//Kľúčové slovo const pred char* v C++ označuje, že ukazovateľ na reťazec nemôže meniť obsah, na ktorý ukazuje. 
//To znamená, že reťazec, ktorý je odovzdaný funkcii ako argument, zostane nezmenený počas celej doby vykonávania funkcie.
int JeZena(const char *rc)
{
    int cislo = atoi(rc);
	cislo /= 1000; // odstranime posledne 3 cislice
	cislo %= 10; // z toho, co zostalo, chceme poslednu
	return cislo >= 5; // ak plati, je to zena, inak muz
}

//funkcia zisti a vrati volajucemu rok z rodneho cisla 
int rok(const char *rc)
{
    int cislo = atoi(rc);
    int RR = (cislo / 10000);
	if (RR < 12) 
        return RR + 2000;
	else 
        return RR + 1900;
}

//funkcia zisti datum narod. z rod. c. a vypise ho na konzolu v pozad. tvare
void VypisDatum(const char *rc)
{
    int cislo = atoi(rc);
	cout << cislo % 100 << ". ";
	int mesiac = cislo / 100;
	cout << mesiac % 50 << ". ";
    cout << rok(rc);
}

//funkcia vypise data 1 studenta v pozadovanom tvare na konzolu s rozlisenim pohlavia studenta, 
//funkc. moze volat jezena a vypisdatum
void vypis_studenta(Tstudent *s)
{
    cout<<s->priezvisko <<" "<<s->meno<<" \t("<<s->znamka_M<<")  ";
    cout<<"rod.c: "<<s->rodcis;
    if (JeZena(s->rodcis))
		cout << " zena, narodena ";
	else
		cout << " muz, narodeny ";
    VypisDatum(s->rodcis);
	cout << endl;   
}

//funkcia vypise zoznam studentov v pozadovanom tvare na konzolu, moze volat dunkcie jezena a vypisdatum
void vypis_studentov(Tstudent **st, int poc) 
{
	for (int i = 0; i < poc; i++)
		vypis_studenta(st[i]);
}

//porovnavacia funkcia volana vo funkcii insertionsort, ktora porovna dvoch studentov podla zadanych kriterii
int PorovnajStudentov(Tstudent *s1, Tstudent *s2) 
{
    //Funkcia strcmp porovná reťazce s1->priezvisko a s2->priezvisko.
    //Výsledok uloží do premennej porovnanie:
    //Ak je s1->priezvisko menšie než s2->priezvisko, strcmp vráti hodnotu < 0.
    //Ak sú reťazce rovnaké, vráti 0.
    //Ak je s1->priezvisko väčšie než s2->priezvisko, vráti hodnotu > 0.
    //Ak sa priezviská nerovnajú (porovnanie != 0), funkcia okamžite vráti hodnotu porovnanie.
	int porovnanie = strcmp(s1->priezvisko, s2->priezvisko);
    //ak sa nerovnaju
	if (porovnanie != 0) 
		return porovnanie;

    //porovnanie mien ak sa priezviska rovnaju
	porovnanie = strcmp(s1->meno, s2->meno);
    //ak sa nerovnaju
	if (porovnanie != 0) 
		return porovnanie;

	// Porovnanie roku narodenia pomocou funkcie rok()
    int rokS1 = rok(s1->rodcis);
    int rokS2 = rok(s2->rodcis);
    if (rokS1 < rokS2) 
        return -1; // s1 je starší
    if (rokS1 > rokS2) 
        return 1;  // s2 je starší

	// Ak je všetko rovnaké, zachová sa pôvodné poradie
	return 0;

}

//funkcia usporiada 2rozmerne dyn. pole pomocou algoritmu insertionsort. vola funkciu porovnajstudentov
void SelectionSort(Tstudent **pole, int pocet)
{
    for (int i = 0; i < pocet - 1; i++)
    {
        int minIndex = i; // Predpokladáme, že aktuálny prvok je najmenší

        // Hľadáme najmenší prvok v nespracovanej časti poľa
        for (int j = i + 1; j < pocet; j++)
        {
            if (PorovnajStudentov(pole[j], pole[minIndex]) < 0) // Porovnávame študentov
            {
                minIndex = j; // Aktualizujeme index najmenšieho prvku
            }
        }

        // Ak sme našli menší prvok, vymeníme ho s aktuálnym
        if (minIndex != i)
        {
            Tstudent *temp = pole[i];
            pole[i] = pole[minIndex];
            pole[minIndex] = temp;
        }
    }
}

int main() 
{
    //100 prvkove pole ukazovatelov na datovy typ Tstudent vytvorene na ukladanie
    //strukturovych premennych obsahujucich data o studentoch ulozene v subore studenti.txt
	Tstudent **student = new Tstudent*[100];
    int i = 0, pocet;
	ifstream in;

    //overenie ci sa da otvorit subor
	in.open("studenti_sk.txt");
	if( !in )
	{
		cout<<"Subor sa nepodarilo otvorit";
		return 0;
	}

    //ak sa da otvorit, zo suboru studenti.txt si program nacita do strukturovych premennych
    //ulozenych v dvojrozmernom dyn. poli data o kazdom studentovi
    //(potom do kazdeho z tychto prvkov vlozi ukazovatel na strukturovu premennu a datami jedneho studenta)
    //vytvori len tolko kolko je studentov v zozname
    //subor moze obsahovat zaznamy o max. 100 studentoch
	while( !in.eof() && i < 100 )
	{
		student[i] = new Tstudent;
		in >> student[i]->meno >> student[i]->priezvisko >> student[i]->znamka_M >> student[i]->rodcis;
		i++;
	}

    pocet = i-1;

    //NEUSPORIADANY VYPIS zoznamu studentov nachadzajucich sa v subore na konzolu v pozadovanom tvare 
    //s uvedenim pohlavia studenta, pricom taktiez zisti a vypise pocet studentov, ktorych data nasiel v tomto subore
    cout << " neusporiadany zoznam " << pocet << " studentov zo suboru 'studenti.txt'" << endl;
	vypis_studentov(student, pocet);
    
    //USPORIADANY VYPIS
    //nasledne program usporiada studentov ulozenych v 2 rozmernom dyn. poli strukturovych premennych pomocou volania funkkcie
    //selectionsort v ktorej je implementovany algoritmus selection sort podla nasledujucih poziadaviek
    //zoznam bude usporiadany abecedne podla priezvisk
    //ak su priezviska rovnake bude usporiadany podla mien
    //ak su mena rovnake, bude usporiadany podla roku narodenia, najprv je zobrazeny starsi student potom mladsi
    //ak maju vsetko rovnake, tak su ulozeni v poradi v akom ich program nasiel
    SelectionSort(student, pocet);
	cout << endl;
	cout << " USPORIADANY zozn. " << pocet << " studentov zo sub. 'studenti.txt' funkciou 'SelectionSort'" << endl;
	vypis_studentov(student, pocet);
	cout << "------------------------------" << endl;
	
    //program vyhlada studentov s pouzivatelom pozadovanym POHLAVIM a POZADOVANOU DOSIAHNUTOU ZNAMKOU
    cout << "vlozte pohlavie hladanych studentov (z/m):";
	char pohlavie;
	cin >> pohlavie;

    //program odmietne pouzivatelom vlozene pohlavie ine ako z alebo m
	if ((pohlavie == 'm') || (pohlavie == 'z'))
    {
        cout << "vlozte znamku, ktoru maju mat hladani studenti:";
        char znamka[3];
	    cin >> znamka;

        //pre ukladanie strukturovych premennych obsahujucich zaznamy najdenych studentov si program 
        //vytvori dvojrozmerne dyn. pole, ktore po ukonceni jeho pouzivania nemusi zmazat
        //Dynamicky sa alokuje pamäť pre pole ukazovateľov na Tstudent. Toto pole neobsahuje nové objekty 
        //typu Tstudent, iba ukazovatele na existujúce objekty v poli student
        Tstudent** nove= new Tstudent*[pocet];

		int pocet_hlad = 0;

		for (int i = 0; i < pocet; i++) 
        {
            int jeZena = JeZena(student[i]->rodcis);
            if ((pohlavie == 'z' && jeZena) || (pohlavie == 'm' && !jeZena))
            {
                if (strcmp(student[i]->znamka_M, znamka) == 0)
                {
                    nove[pocet_hlad++] = student[i];
                }
			}
		}

        if (pocet_hlad > 0)
        {
            //ak program takychto studentov najde vypise ich zoznam na konzolu a skonci
            cout <<endl<< "pocet a zoznam najdenych studentov s pohlavim " << (pohlavie == 'm' ? "'m'" : "'z'") << " so znamkou " << znamka << ": " << pocet_hlad << endl;
            vypis_studentov(nove, pocet_hlad);
        }
        else
        {
            //ak takyto studenti nie su, ale pohlavie je z m alebo z vypise sa hlaska a program skonci
            cout <<endl<< "pocet najdenych studentov s pohlavim " << (pohlavie == 'm' ? "muz" : "zena") << " so znamkou: " << znamka << " 0" << endl;
        }

        //pole nove nevyžaduje rovnaké mazanie ako pole student, pretože pole nove neobsahuje nové dynamicky alokované objekty, 
        //ale iba ukazovatele na existujúce objekty v poli student
        //delete[] nove;
        delete[] nove;
		        
	}
    
    //ak je pohlavie ine ako z alebo m
    else
        {
            cout << "Vloz z/m" << endl;
        }

//delete student[i]:
//Uvoľňuje pamäť alokovanú pre každý jednotlivý objekt typu Tstudent.
//delete[] student:
//Uvoľňuje pamäť alokovanú pre samotné pole ukazovateľov (Tstudent** student).
   for (int i = 0; i < pocet; i++)
{
    if (student[i] != nullptr)
        delete student[i];
}

//Uvoľňuje zdroje spojené s otvoreným súborom
    in.close();
}



SHAKE SORT 

void ShakeSort(Tstudent **pole, int pocet)
{
    bool swapped = true; // Sledovanie výmen
    int start = 0;       // Začiatok nezoradenej časti poľa
    int end = pocet - 1; // Koniec nezoradenej časti poľa

    while (swapped)
    {
        swapped = false;

        // Posun zľava doprava (ako v bublinovom triedení)
        for (int i = start; i < end; i++)
        {
            if (PorovnajStudentov(pole[i], pole[i + 1]) > 0)
            {
                // Vymeníme prvky
                Tstudent *temp = pole[i];
                pole[i] = pole[i + 1];
                pole[i + 1] = temp;
                swapped = true;
            }
        }

        // Ak neboli žiadne výmeny, pole je už usporiadané
        if (!swapped)
            break;

        swapped = false;

        // Posun zľava doprava zmenšíme koniec
        end--;

        // Posun sprava doľava
        for (int i = end - 1; i >= start; i--)
        {
            if (PorovnajStudentov(pole[i], pole[i + 1]) > 0)
            {
                // Vymeníme prvky
                Tstudent *temp = pole[i];
                pole[i] = pole[i + 1];
                pole[i + 1] = temp;
                swapped = true;
            }
        }

        // Zvýšime začiatok
        start++;
    }
}


BUBBLE SORT

void BubbleSort(Tstudent **pole, int pocet)
{
    bool swapped;

    do
    {
        swapped = false;

        for (int i = 0; i < pocet - 1; i++)
        {
            // Porovnanie susedných prvkov
            if (PorovnajStudentov(pole[i], pole[i + 1]) > 0)
            {
                // Vymeníme prvky
                Tstudent *temp = pole[i];
                pole[i] = pole[i + 1];
                pole[i + 1] = temp;
                swapped = true;
            }
        }

        // Ak neboli výmeny, ukončíme algoritmus
    } while (swapped);
}

