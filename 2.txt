#include <fstream>
#include <iostream>
#include <string>
using namespace std;

struct Tstudent
{
	char meno[20],priezvisko[20];
	char znamka_M; // 'A', 'B', 'C', 'D', 'E', 'F'
	int rodcis;
};

int JeZena(int c)
{
	c /= 1000; // odstranime posledne 3 cislice
	c %= 10; // z toho, co zostalo, chceme poslednu
	return c >= 5; // ak plati, je to zena, inak muz
}

int rok(int rc)
{
    int RR = (rc / 10000);
	if (RR < 12) 
        return RR + 2000;
	else 
        return RR + 1900;
}

void VypisDatum(int c)
{
	cout << c % 100 << ". ";
	int mesiac = c / 100;
	cout << mesiac % 50 << ". ";
	rok(c);
    cout << rok;
}

void vypis_studenta(Tstudent *s)
{
    cout<<s->priezvisko <<" "<<s->meno<<" \t("<<s->znamka_M<<") ";
    cout<<"rod.c: "<<s->rodcis;
    if (JeZena(s->rodcis))
		cout << "zena, narodena ";
	else
		cout << "muz, narodeny ";
    VypisDatum(s->rodcis);
	cout << endl;   
}

void vypis_studentov(Tstudent **st, int poc) 
{
	for (int i = 0; i < poc; i++)
		vypis_studenta(st[i]);
}

int PorovnajStudentov(Tstudent *s1, Tstudent *s2) 
{
	int porovnanie = strcmp(s1->priezvisko, s2->priezvisko);
	if (porovnanie != 0) 
		return porovnanie;
	porovnanie = strcmp(s1->meno, s2->meno);
	if (porovnanie != 0) 
		return porovnanie;
	if (s1->rodcis < s2->rodcis) 
		return -1;
	
	return 0;

}

void InsertionSort(Tstudent **pole, int pocet) 
{
	int i, j;
	Tstudent* tmp;
	for (i = 1; i < pocet; i++) {
		for (j = i, tmp = pole[i]; (j > 0) && PorovnajStudentov(tmp, pole[j - 1]); j--)
			pole[j] = pole[j - 1];
		pole[j] = tmp;
	}
}
int main() 
{
	Tstudent **student = new Tstudent*[100];
    int i = 0, pocet;
	ifstream in;

	in.open("studenti.txt");
	if( !in )
	{
		cout<<"Subor sa nepodarilo otvorit";
		return 0;
	}

	while( !in.eof() )
	{
		student[i] = new Tstudent;
		in >> student[i]->meno >> student[i]->priezvisko >> student[i]->znamka_M >> student[i]->rodcis;
		i++;
	}

    pocet = i-1;
    cout << " neusporiadany zoznam " << pocet << " studentov zo suboru 'studenti.txt'" << endl;
	vypis_studentov(student, pocet);
    
    InsertionSort(student, pocet);
	cout << endl;
	cout << "USPORIADANY zozn. " << pocet << " studentov zo sub. 'studenti.txt' funkciou 'InsertionSort'" << endl;
	vypis_studentov(student, pocet);
	cout << "------------------------------" << endl;
	
    cout << "vlozte rok narodenia hladanych studentov:";
	int rok_hl;
	cin >> rok_hl;
    cout << "vlozte znamku, ktoru maju mat hladani studenti:";
    char znamka;
	cin >> znamka;
	if (rok_hl >= 1912 && rok_hl <= 2011) 
    {
        Tstudent** nove= new Tstudent*[pocet];

		int pocet_hlad = 0;
		for (int i = 0; i < pocet; i++) 
        {
			if (rok(student[i]->rodcis) == rok_hl && student[i]->znamka_M == znamka) 
            {
				nove[pocet_hlad++] = student[i];
			}
		}
		cout << "pocet a zoznam studentov narodenych v roku " << rok_hl << " so znamkou " << znamka << ": " << pocet_hlad << endl;
		
        vypis_studentov(nove, pocet_hlad);
	}
	else
        cout << "pocet studentov narodenych v roku"<< rok_hl << "so znamkou" << znamka << ": "<< "0"<< endl;
    
    for (int i = 0; i < pocet; i++)
		delete student[i];
	delete[] student;
    
}




#include<iostream>
using namespace std;

class FirmaAutobazar
{
  private:
    char nazov_firmy[30], pravna_forma[10], sidlo_firmy[30];
    long ICO;
    long long DIC;
    public:		
	FirmaAutobazar() {} 
	//explicitny parametricky konstruktor
    FirmaAutobazar(char *, char *, char *, long, long long);
    char *VratNazovFirmy(); 
    char *VratPravnaForma();
    char *VratSidloFirmy();
    long VratICO(); 
    long long VratDIC();  
    void ZmenNazovFirmy(char *r);
    void ZmenPravnaForma(char *r);
    void ZmenSidloFirmy(char *r);
    void ZmenICO(long);
    void ZmenDIC(long long);
};

class Automobil:public FirmaAutobazar	
{
   private:
     char znacka_typ_auta[30];
     int rok_vyroby_auta, predaj_cis_auta; 
     long int cena_auta;
   public:
	 //explicitny parametricky konstruktor
     Automobil(char *, char *, char *, long, char*, int, int, long int);
	 char *VratZnackaTypAuta();		
     int VratRok_vyroby_auta();
     int Vratpredaj_cis_auta(); 
     long int VratCena_auta(); 
     void ZmenZnackaTypAuta(char *r);
     void ZmenRok_vyroby_auta(int);
     void Zmenpredaj_cis_auta(int);
     void ZmenCena_auta(long int);

	friend ostream& operator<<(ostream &vyst_prud, Automobil a);
};


#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

#include "Triedy.h"

int main() {
	cout << "kolko automobilov chcete vkladat do programu? ";
	int pocet;
	cin >> pocet;
	cout << "-----------------------------------------------" << endl;
	Automobil *pole = new Automobil[pocet];	
	Automobil stat_obj = Automobil("Happy_Autobazar", "s.r.o.", "Trnava", 19865789, 2586578521, "Ford_Mondeo", 2010, 589742, 5230);
	string Name;
	string Form;
	string Place;
	long ICO1;
	long long DIC1;
	string Brand;
	int Year;
	int Number; 
	long Price;
	
	for (int i = 0; i < pocet; i++) 
	{		
		cout << "vlozte nazov firmy prevadzk. autobazar s " << i + 1 << ". predavanym autom      : ";
		cin >> Name;
		cout << "vlozte pravnu formu fy. prevadzk. autobazar s " << i + 1 << ". predavanym autom : ";		
		cin >> Form;
		cout << "vlozte sidlo firmy prevadzk. autobazar s " << i + 1 << ". predavanym autom      : ";
		cin >> Place;
		cout << "vlozte ICO firmy prevadzk. autobazar s " << i + 1 << ". predavanym autom        : ";
		cin >> ICO1;
		cout << "vlozte DIC firmy prevadzk. autobazar s " << i + 1 << ". predavanym autom        : ";
		cin >> DIC1;
		cout << "vlozte znacku a typ " << i + 1 << ". auta                                       : ";
		cin >> Brand;
		cout << "vlozte rok vyroby " << i + 1 << ". auta                                         : ";
		cin >> Year;
		cout << "vlozte predajne cislo " << i + 1 << ". auta                                     : "; 
		cin >> Number;
		cout << "vlozte predajnu cenu " << i + 1 << ". auta [Eur]                                : ";
		cin >> Price;
		cout << "----------------------------------------------" << endl;		

		(pole+i)->setnazov_firmy(Name);
		(pole+i)->setpravna_forma(Form);
		(pole+i)->setsidlo_firmy(Place);
		(pole+i)->setICO(ICO1);
		(pole+i)->setDIC(DIC1);
		(pole+i)->setznacka_typ_auta(Brand);
		(pole+i)->setrok_vyroby_auta(Year);
		(pole+i)->setpredaj_cis_auta(Number);
		(pole+i)->setcena_auta(Price);
	}

	cout << "programom vytvoreny a inicializovany objekt pomocou parametrickeho konstruktora triedy 'Automobil'" << endl;
	cout << "----------------------------------------------" << endl;
	cout << stat_obj << endl;
	cout << "hodnoty instan. premennych objektov triedy 'Automobil' (aut). vlozene pouzivatelom programu" << endl;
	for (int i = 0; i < pocet; i++) {
		cout << "----------------------------------------------" << endl;
		cout << *(pole+i);
	}
	cout << "----------------------------------------------" << endl;	
	long long celkova_cena = stat_obj.getcena_auta();
	for (int i = 0; i < pocet; i++)
		celkova_cena += (pole+i)->getcena_auta();
	float priemerna_cena = ((float)celkova_cena) / (pocet + 1);
	cout << "celkova predajna cena uvedenych " << pocet + 1 << "-och aut [Eur]                   : " << celkova_cena << endl;
	cout << "priemerna predajna cena uvedenych " << pocet + 1 << "-och aut [Eur]                 : " << std::setprecision(1) << std::fixed << priemerna_cena << endl;
	
	delete[] pole;

	return 0;
}
